<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Orangebomb</title>
    <link>https://blog.orangebomb.org/</link>
    <description>Recent content on Orangebomb</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 07 May 2020 20:47:42 +0900</lastBuildDate>
    
	<atom:link href="https://blog.orangebomb.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>なぜなに人間中心設計（HCD）</title>
      <link>https://blog.orangebomb.org/blog/2020/05/07/what-is-hcd/</link>
      <pubDate>Thu, 07 May 2020 20:47:42 +0900</pubDate>
      
      <guid>https://blog.orangebomb.org/blog/2020/05/07/what-is-hcd/</guid>
      <description>まだ新型コロナウイルスが蔓延していなかった去年の12月、UX JAM in FUKUOKA 02で「なぜなに人間中心設計（HCD）」というタイトルで発表させていただきました。端的に「人間中心設計とは何か？」ということを解説しているので、短い時間でざっくりとした概要を知っていただけます。
発表中、HCDサイクルの図のページの時に写真を撮っている人が何名かいたので「あとでアップするので安心してください〜」と伝えると「先に言ってw」というフランクなツッコミをいただきました。ホンマやでw その通りなので次回からは発表前の告知を忘れないようにしたい（このブログ記事は５ヶ月も経過して公開したが、スライドはイベント後すぐにアップしTwitterでシェアし有言実行を果たしている）。
フレンドリーなツッコミを受けるのもこういうイベントの心地良さなんだよな〜、またリアルイベントで登壇したい。新型コロナが収束したら、リアルイベントの良さとリモートイベントの良さを両取りする新しい形態が生まれないだろうか？リアルに介した時の会場のインタラクションの速度・空気感が一番心地よいのは間違いないが、リモートの「住んでいる場所を選ばない」「小さなお子さんがいる家庭のクリエイターも参加しやすい」という良さはリアルイベントにはない。
僕自身のHCDの課題は１工程目 HCDサイクルはスライドにある通り大きく分けて以下の４工程です。
 実情を知る（利用状況の把握と明示） 分析（ユーザーの要求事項の明確化） 分析結果に基づく設計（ユーザーの要求事項を満足させる設計による解決策の作成） 実証試験（要求事項に対する設計の評価）  僕は《 1. 実情を知る（利用状況の把握と明示）》 が最も難易度が高いと考えており、今特に力を入れています。多少は経験あれど、２・３・４の工程に比べて極端に経験が少ない。職場では、専門分野の可視化や組織編成の恩恵でリサーチ主体のデザイナーとなれたので、絶好のチャンス。デザイナーあるあるのような気もしますが、これまでは「まず作る」という性質が多かったので、どうしても「まず調べる」の経験値が少ない。足を使いたい。HCDに出会い「カンで作る」体質と決別でき「実情」という根拠に基づく設計をできるようになりつつあるので、「調べる」の経験値獲得をやっていく。</description>
    </item>
    
    <item>
      <title>どのような理由と思考でこのブログのシンボルマークができたのか</title>
      <link>https://blog.orangebomb.org/blog/2018/05/11/orangebomb-symbol-making/</link>
      <pubDate>Fri, 11 May 2018 09:31:02 +0900</pubDate>
      
      <guid>https://blog.orangebomb.org/blog/2018/05/11/orangebomb-symbol-making/</guid>
      <description>今まで神秘のカーテンによって閉ざされていたデザインの工程を見せること。それは、デザイナーの仕事が重要であることを伝えるためではなく、デザインが抱える大きな課題解決に協力してもらうためにあります。
 2016年、デザイナーが実践すること : could に綴られているこの言葉には同意する。デザイナーにありがちな「完成までのプロセスがブラックボックス問題」というのがある。公開されることはまだ多くないので、周りはどうやって作っているのかわからない。わからないからこそ発生する認識のすれ違いがある。
すれ違いを解決するには途中工程を見せることに加え、「思考をさらけ出すこと」が重要だと考える。これは周りとのすれ違いを発生させにくくするだけでなく、本人も「見せる」というアウトプットによりフィードバックを受け、さらなる成長を遂げることができる。
ということで、見せるものの一つとしてこのブログのシンボルマークのメイキングを公開しようと思う。
そもそもなぜシンボルマークか シンボルの長所と短所 シンボルは「目印」として役に立つ。繰り返し目にすれば、記憶に残る。存在を示すこと・認識することに役立つのだ。そういう理由で「家紋」「紋章」などをはじめ大昔から全世界に「シンボルマーク」というのが存在するのだと思う。
 繰り返し目にすれば、記憶に残る。存在を示すこと・認識することに役立つ
 これに特化させようとしたのか、それとも知名度的にもはや文字は不要なのか、Twitter、Facebook、スターバックスなどをはじめ最近のWebサービスでは、シンボルマークだけをサイトタイトル部分に表示することがある。本当にそれでサービスのことが認識されるとしたら、それが一番シンプルだ。逆に言葉にできなくて「青っぽい鳥のマークのアレ」などと伝えるのに不便になるリスクも伴う。ここはやはり知名度に左右されるような気もする。
シンボル単体にした理由 別にこのブログで生計を立てているわけではない。前述のようなリスクがあっても問題なく、すべてが自由だ。やりたいこと・試したいことが自由自在にできる。なので、「シンボルマークだけで伝えるパターン」を試してみたかった、というのが理由だ。 この動機がなければ、ブログ名部分は、タイポグラフィでもよかった。反面、「このブログを覚えてもらう」最適解は図形としても記憶でき言葉としても記憶できる「シンボルマークとロゴタイプ（文字）が合わさったロゴマーク」だということもわかっている。試すことを優先した。
理由と動機の説明の次は、具体的な工程の話に入る。
工程1/3：ブログ名を決める Orangebomb（オレンジボム）というのがブログ名。そういう名前に至るまでの思考をつらつら書いていく。
 いつか自分のブログが作りたい。その時のドメインを取っておこう 当時 designbombs.com が好きだった オレンジ色がわりと好き ボムという言葉がなんか好き。マリオでもボム兵は最高。かわいい オレンジボムという言葉を考え、orangebomb.org というドメインをとった。bombsでないのは、こちらは複数ではないから  こういう経緯で、ドメイン名をそのままブログ名にした。
工程2/3：プロトタイプ作成 どのような図形に可能性があるか見るために、具体的な案を作成・検証していく。今回重要視したのは、「サイトレイアウト・色調にしっくりくるか」という部分。 なぜならば、ブログ記事を書いているとき・読んでいるとき、雰囲気でテンションを上げたいからだ。記事を「読むとき」の器となるWebページは、料理の皿のようなものだと思う。スタイリングやレイアウトが読みやすさ・読みにくさに直結し、装飾が雰囲気をコントロールする。「器」が良い体験にも悪い体験にもしてしまうのだ。
プロトタイプ1：ストレートに爆弾 オレンジ色の爆弾。そのまま形にした。微妙&amp;hellip;塗りの印象が重いうえに、全部塗ってしまうと爆弾に見えない。
プロトタイプ2：爆弾の種類変更 「ボム」つながりでダイナマイトにしてみた。塗りが重い問題を軽減できたのでは。しかしなんかピンとこない。
 線が多すぎる ダイナマイトは縮小表示するには複雑め 複雑で縮小した時に視認性が悪くなると、なんの図形か認識できなくなってしまうため、シンボルとしては望ましくない 平面ではダイナマイトであると伝わりにくい可能性あり  プロトタイプ3：路線変更、頭文字を使う 常套手段である「頭文字」パターン。Orangebomb の頭文字をシンボルにした。わりとよさげ？しかしまだ気に入らない。もうちょっと考えよう。
 塗りが重い問題は解決できていない グラデーションつける？  プロトタイプ4：頭文字パターンのマイナーチェンジ ここでレイアウト側のアップデート。ヘッダと本体を差別化するため、さりげなく白い帯を引くことにした。ロゴについてはベタ塗りが重かったので、まずそれをやめた。
だがしかし課題は多い。
 この図形の意味がよくわからない 意味があろうとなかろうと、目印としてこのブログと紐づけて記憶してもらえればそれでシンボルの役割は一応は果たせる。しかし、初見でも名前（Orangebomb）との関連性が理解できた方がやはり良い  プロトタイプ5：爆弾と頭文字の混成 まわりまわりめぐりめぐって
改良版のオレンジ色の爆弾に行き着いた。（この段階では果物にも見えるが）
 ブログのドメインとロゴの示す内容の一致 プロトタイプ1と頭文字の「O」を足すことで塗りが重い問題も解決  爆弾の形にしたらどうしてもチープだった問題を、頭文字パターンを経由することで解決した。
今回はこのパターンだったというわけだ。
工程3/3：ブラッシュアップ プロトタイプ検証で方向性は見えた。ここから磨きの工程に入る。</description>
    </item>
    
    <item>
      <title>Photoshopを使った80年代風のタイトル画像の作り方</title>
      <link>https://blog.orangebomb.org/blog/2018/05/01/80s-tv-title/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.orangebomb.org/blog/2018/05/01/80s-tv-title/</guid>
      <description>Photoshopを利用した、昔懐かしい80年代風のテレビタイトル画像を作成する手順を紹介します。
趣味仲間で集まり映画の上映会をしたあとに、ちょっとした出し物をする機会があったためジョーク気味に作成しました。
なので以下が注意内容になります。
 80年代「風」なので、正確な再現ではないこと 使用したフォントも本来の用途のものではなく、当時おそらくテレビには利用されていなかったフォントであること 雰囲気「だけ」であること 勝手なイメージから創作している部分があること あくまでジョークであること  この点にだけは気をつけてください。僕自身は85年生まれのため、ほとんど90年代以降の記憶しかありません。なので頭の中で生まれたイメージの側面が強いです。
では、具体的な手順を見ていきましょう。
まずは観察と気づきをメモ 雰囲気を再現するためには、観察が欠かせません。Google検索を使って、それらしい画像を観察していきます。
上記以外にもいろいろな観察を繰り返した結果、以下を気づきとしてメモしました。
 実写以外では、アニメ作品中心に背景はベタ塗りであるケースが多い  セル画の性質か配信などそれ以外の理由か、最終的に彩度が低い アニメ以外では彩度が高いものもある（高すぎるくらいに）   言い回しにユーモアさがあることが多い？ ビックリマークはナナメであることが多い ブラウン管の性質か、画像が滲んでいる・ぼけている  80年代当時、アニメはセル画を使われており、テレビはブラウン管テレビが主流。観察でいろいろと発見。あくまでジョークコンテンツであるため 「観察」にとどめ、歴史的背景や事情の調査は行いませんでした。
観察結果をもとに文言のチョイスとレイアウト 会場の参加者が楽しめるよう、ユーモアさが欲しい。観察して得た80年代の言い回しを参考に、ちょっと盛った文言を用意。
今回のコンテンツが「MCUサントラクイズ」というコンテンツですが、その前後に本来不要である文言を追加して雰囲気を出すことにしました。「君はあの瞬間を音で覚えているか！チキチキ MCUサントラクイズ 最初で最後の劇伴バトル傑作青春編」。このへんはだいぶ僕のイメージから生成された部分ですが、「問いかけ」「傑作」「青春編」という部分が80年代っぽいかな&amp;hellip;と。お気に入りなのは、「最初で最後」と言っているのに「青春編」と付いていて辻褄が合っていないところです。ここは80年代関係なく、意味不明さの演出です。ほら、お楽しみコンテンツなので…。
ビックリマークをナナメにし、フォントもそれらしいものを選びました。国鉄（現在のJR）がまだ存在していた時代はちょうど80年代も含まれているため、国鉄方向幕書体を選択。配色も、観察時に集めたサンプルを参考に近い組み合わせを作りました。
一番重要な雰囲気加工 レイアウトした段階では、色が綺麗すぎます。これでは雰囲気が出ません。ここからは雰囲気を出す加工を行っていきます。 まず、すべてのレイヤーを結合し、一枚の画像にします。（バックアップとして必ず未結合のレイヤーデータは残してください。事前に.psdファイルを複製するか、同じファイル上でレイヤーをディレクトリにまとめ、非表示にしておくでもOKです）
ブラウン管の再現：ぼかし小 現在主流の液晶テレビとは異なり、当時のブラウン管テレビでは「滲み」が大きい印象です（これはブラウン管の性質か、ブラウン管に伝わる信号の性質なのか詳しくは未調査です）。ここではその印象に従い、再現していきます。
再現するために、「ぼかし」を使います。メニューの「フィルタ」-&amp;gt;「ぼかし」-&amp;gt;「ぼかし（ガウス）」を選択し、半径 1.3pixel ほど適用します。
ブラウン管の再現：ぼかし大-&amp;gt;ソフトライト-&amp;gt;半透過 続けてブラウン管の発光を再現。レイヤーを複製し、オリジナルの上で大きくぼかし、ソフトライトをかけ発光しているように見えるようにし、発光具合の調整のため半透明にします。
複製し、メニューの「フィルタ」-&amp;gt;「ぼかし」-&amp;gt;「ぼかし（ガウス）」を選択し、半径 6.0pixel ほどのぼかしをかけます。
そのまま、ぼかしたレイヤーに「ソフトライト」を適用します。
不透明度を50%にし半透明にします。
次の工程のために、複製したレイヤーはオリジナルと結合してしまいましょう。
当時の傾向の再現：彩度を大幅に低下させる 最後の仕上げに観察結果にある「彩度の低さ」を再現。
メニューの「イメージ」-&amp;gt;「色調補正」-&amp;gt;「色相・彩度」を選択し、「彩度」を -40 ほどにします。
さらに2010年代ならではの加工 今現在、正しく当時の再現をできるのは、録画データだけです。しかし、懐かしい動画や画像に関して、多くの人は録画データではなく、ネット上で出会うのではないでしょうか。それらのデータは往々にして、劣化しています。なので、あえて劣化させることで、2010年代に出会う懐かしい画像というふうに再現します。
jpegの質を5%に低下させるのは僕も初めてでした。
メニューの「ファイル」-&amp;gt;「書き出し」-&amp;gt;「Web用に保存（従来）」を選択し、形式はJPEG、画質を 5 にします。これで画質の劣化が再現できます。あとは「保存」をクリックし、保存しましょう。
これで完成。
まとめ 工程をまとめると、以下のようになります。
 観察し、それらしい言い回しを用意する ビックリマークはナナメに 配色についてもよく観察して再現 ブラウン管テレビで映し出した状態を再現するためにあえてぼかす 最終的に彩度を落とす さらに、jpegの質を5%に落とし現代で出会う状態にする  イベントのお楽しみコンテンツを作成するときなど、試してみてください。</description>
    </item>
    
    <item>
      <title>Photoshopを使って一枚の画像でアナグリフ（3D画像）を作るチュートリアル</title>
      <link>https://blog.orangebomb.org/blog/2017/12/10/anaglyph/</link>
      <pubDate>Sun, 10 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.orangebomb.org/blog/2017/12/10/anaglyph/</guid>
      <description>アナグリフとは「立体写真」のことです。レンズ部分が片方は青・もう片方は赤の透明シートでできているメガネで見ると、立体的に見える例のアレですね。その昔懐かしい立体写真や、今や3D映画でおなじみの立体映像は、1853年にRollmanという人が原理を導いたとされる「アナグリフ方式」、その後「シャッター方式」「偏光方式」など変化してきています。ここではPhotoshopを利用して、一枚の写真を昔懐かしいアナグリフ方式の写真へ加工する手順を紹介します。
応用のために原理を知る 三次元認識の原理のひとつは、二つの視点です。人間の目は、左右別々の位置にあります。当然、片目をつぶって見ると微妙に見える角度が変わります。これが「両眼視差」と呼ばれるものです。三次元認識には他に「遠近法的手がかり」「遮蔽関係」「明瞭さ」「運動視差」などがありますが、アナグリフでは「両眼視差」を利用します。左右の目でそれぞれ微妙にズレた状態を眼を通して網膜に映すことで、脳が立体像として認知します。
眼の前数センチの距離にあるものを見るとブレて見え、離れたものを見るとブレずくっきり見えるように、眼球から距離があればあるほど視差は小さくなります。よって、アナグリフで画像をブラす度合いの調整次第で立体像の見え方が変わります。
現実世界でやっていることを、平面上で再現し脳に「錯覚」を起こさせるというのが仕組みです。
補足 ちゃんとした立体像を作る場合、一枚の画像ではなく微妙にズレた二枚の写真を用意するとより自然に近い立体像を作ることができます。要するに両目で見たその状況のままを二枚の画像で再現するわけです。二枚の画像でアナグリフを作成するのは、また別の機会に…。
操作手順 まずは加工する画像を用意します。
今回はunsplash.comで無料配布されているこの画像を使います。
まずは選択ツールや「選択とマスク」等を利用し、人物を切り抜きます。
赤青の3Dメガネで見たとき、背景部分の人物がそのままの状態では、上に重ねる人物と重なって二重に見えてしまいます。それを防止するために、人物の周囲をある程度背景に同化させます。方法はなんでも構いません、僕の場合は「コピースタンプツール」を使いました。
ここからがアナグリフ加工の本番です。用意した背景と人物をどちらも表示させ重ねます。
アナグリフは前述の通り、左右の眼が「ズレ」を認識し立体像として脳が錯覚を起こします。そのために、背景と人物はそれぞれ一つずつ複製し、ずらせるように二つずつになるようにしておきます。
まずは人物から加工を行います。人物レイヤーを選択し、レイヤーツール下方にある「fx」というアイコンをクリックし「レイヤー効果」を選択します。
レイヤースタイルパネルが表示されるので、「高度な合成」の項目の「チャンネル」を「R」のみチェックが入っている状態にします。
もう片方の人物レイヤーには別の効果をかけます。 こちらは先ほどと逆に「チャンネル」を「G」と「B」のみチェックが入っている状態にします。
二つとも効果をかけることができました。レイヤーの右側に「効果付き」を示すアイコンが表示されます。しかしこのままでは画像になんの変化もありません。
効果は人物レイヤーをずらすと現れます。それぞれ右・左にずらしましょう。この人物は背景と比較し、 見る側にとって背景より近くにいる ので、視差は大きいはずです。よって大きめにずらします。
背景にも同じように効果を適用し、それぞれずらします。ただし人物よりも遠くに存在するものです。よって視差は小さいので、人物よりも少なめにずらします。 人物と背景のこのズレ具合の違いが立体感を引き出します。
背景をずらしたことで、両サイドに隙間が生まれます。トリミングしてしまいましょう。
これで完成です！赤青の3Dメガネを用意し、実際に見てみましょう！
出典・参考文献 以下の文献の情報を参考にしました。
 視差 - Wikipedia アナグリフ 3次元ディスプレイ - Wikipedia Tom Stafford・Matt Webb 『Mind Hacks 実験で知る脳と心のシステム』 夏目 大 訳、オライリージャパン、2005年、ISBN4-87311-271-0 アナグリフはなぜ飛び出して見えるのか-立太子をテーマにした系統的学習の試み- How To Create Anaglyph 3D Images That Really Work!  所感 Photoshopのチュートリアル記事でした。いろいろ調べてみたものの、アナグリフのチュートリアルは少ないようだったので作成しました。背景の加工をはじめ、このやり方以外にもっとよりスマートなやり方がある気がします。「アドオンを使う」などではなく、テクニックとしてもっといいやり方をご存知の方はぜひ教えてください。あと原理部分、解釈が誤っている場合もご指摘ください！
（あと背景合成、後ろの壁の調整をミスってることに作った後気付いた）</description>
    </item>
    
    <item>
      <title>インクルーシブ本の査読させていただいたら興奮した話</title>
      <link>https://blog.orangebomb.org/blog/2017/10/13/inclusive-design-patterns/</link>
      <pubDate>Fri, 13 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.orangebomb.org/blog/2017/10/13/inclusive-design-patterns/</guid>
      <description>Heydon Pickeringさん（@heydonworks） による著書 Inclusive Design Patterns の日本語化+充実の訳注付き版が インクルーシブHTML+CSS &amp;amp; JavaScript 多様なユーザーニーズに応えるフロントエンドデザインパターン として発売されます。
監訳はデザイニングWebアクセシビリティ - アクセシブルな設計やコンテンツ制作のアプローチの著者であり、コーディングWebアクセシビリティ - WAI-ARIAで実現するマルチデバイス環境のWebアプリケーションの監訳者である太田良典さん（@bakera）と伊原力也さん（@magi1125）のお二人。
査読のきっかけ ある日、@magi1125さんがアクセシビリティコミュニティのSlackにて以下のような募集をされていました。
これからアクセシビリティやっていきの人に査読して欲しい、というもの。要するにユーザビリティテストの被験者のようなもの。 そこでまさにアクセシビリティこれからやって行く勢だった僕が立候補をさせていただきました。
不安だったのが僕が「フロントエンドがめちゃくちゃ強いわけじゃない」という部分で、そこについて尋ねたところ「まさしくそういう人もターゲットである」ということだったため安心しました。「ネタバレ歓迎」「ゲラを全部公開するとかでもない限りなんでもあり」とのことだったのでガンガン語ろうと思います。
どんな本？ まず ちょこっと紹介① 刊行によせて／日本語版の刊行によせて より抜粋します。
 本書の原著のタイトルは、&amp;ldquo;Inclusive Design Patterns&amp;quot;で、インクルーシブな「デザインパターン」を意味します。そして副題は &amp;ldquo;Coding Accessibility Into Web Design&amp;rdquo; となっており、これを見ていただけばわかるように、アクセシビリティに配慮したWebの実装方法を紹介する内容になっています。既存のWebアクセシビリティの書籍は、WCAG 2.0のガイドラインを紹介するものであったり、「こうするのはよくない」というアンチパターンを紹介するものが主流でした。もちろん、それらを知ることには大きな意味があります。しかし、現場の実装者が実際にどのようなマークアップをし、どのようにJavaScriptを実装するのがよいのか、具体的な実装例まで踏み込んで紹介する書籍はほとんどありませんでした。
 まさにこの本は、「現場の実装者が実際にどのようなマークアップをし、どのようにJavaScriptを実装するのがよいのか、具体的な実装例まで踏み込んで紹介する書籍」というわけです。もちろんそれだけではないのですが、まずはタイトルに含まれる「インクルーシブ」という単語についても紹介します。
インクルーシブ（Inclusive）とは?  全てを含んだ、包括的な、包含的な 一部の人の制限しない、開放的な、いろいろな人が参加できる exclusive (排他的) の反対語  この本では「誰でも受け入れる」「特定の人を除外しない」のような意味で利用されています。 インクルーシブの逆の「インクルーシブではない状態」とは、特定の状況に置かれた人には使えない状態のこと、つまり「人を選ぶデザインはインクルーシブではない」と言えます。
僕の以前のエントリー アクセシブルにするならSlideShareを選ぶべき？SlideShareへのアップロード方法 にて、アクセシブルとは？について自分の見解を述べました。
 僕は どのような条件であろうと誰しもが同じようにコンテンツにアクセスすることができること という認識をしている。僕にとって「障害者対応」という言葉は本質的ではなく、目が見えなかったとしても、耳が聞こえなかったとしても、テクノロジーを利用すれば健常者と同じようにコンテンツを参照できるのだから、当然そうあるべきである、というもの。（似て非なるもの、というか。やっていることは同じかもしれないが、捉え方の問題）
 この本で紹介されている「インクルーシブデザイン」とは、アクセシビリティをも包括的に含み、特定の誰かを排除することなく「ユーザー」と「ユーザーが使うもの」のすべてを視野に入れた総合的なデザインのことです。 この本は「インクルーシブな実装例」が紹介されていました。
「ダメ」ではなく「こうしよう！」 「アレはこういう理由でやってはいけません」と言われ「ではどうすればいいのか…」というような「そこからは放任」というケースは悲惨です。 しかしこの本は表紙にあるように、「ダメ」ではなく「こうしよう！」（そしてどういう理由・根拠で）を学ぶ本と言えます。 ただし、監訳者のひとり@bakeraさんのエントリーによれば
 なお、この本で語られている実装方法は、あくまで方法のひとつでしかないことに注意してください。他にもさまざまな方法がありますし、他の方法がダメだというわけではありません。さまざまな方法にはそれぞれ一長一短があり、原著者の主張する実装方法にも長所だけでなく短所があります。この本の実装方法をベースに、短所について議論していただいたり、より良い案を出していただくのも良いでしょう。「この方が良いのでは?」といった感想を持たれた方は、ぜひ共有いただき、議論を深めていただきたいと思います。
 「こうしよう！」という本書の提案も あくまで選択肢の一つである ということには注意です。</description>
    </item>
    
    <item>
      <title>多くの人に伝えたい。広めたい。そんなとき、一体どうすればよいのか？ 〜インターネットで 可能性をつなげる、ひろげる〜</title>
      <link>https://blog.orangebomb.org/blog/2017/10/02/sangosan/</link>
      <pubDate>Mon, 02 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.orangebomb.org/blog/2017/10/02/sangosan/</guid>
      <description>長崎県の五島列島、福江島。かつて珊瑚漁でさかえた港町にさんごさんという、築80年の古い民家を改装し新設された図書館があります。そのさんごさん主催でおとな小学校　デザインの時間「島でデザインを考えよう」というイベントが行われ、ご縁があってペパボのメンバーで登壇させていただきました。
一生懸命頑張って、素敵なアイデア商品を生み出した！多くの人に伝えたい。広めたい。そんなとき、一体どうすればよいのか？
この発表内容に含まれていた「レンタルサーバー」+「独自ドメイン」で作ったサイトが「拠点」に最適であるという話についてはこちらでも語られています。
 人知れず世界を動かす「枯れた技術」の復権 変わるネットと個人の表現―クラウドで消耗しない世界  さらに多くを知ることができる？  拠点であるサイトによってさらに多くを知ることができる？
 というスライドの文章に関して補足を。
 公式サイトなら “それの価値をさらに深掘りできる” 公式サイトなら “それを生み出すに至るまでのエピソードを話せる” 公式サイトなら “それに込めた想いを語れる” 公式サイトなら “付加要素を紹介できる”  印刷物やSNSでは伝えきれなかったことを、サイトであれば思う存分伝えることができます。印刷物やSNSでの拡散によって興味を持った人がサイトを訪れ、想いに触れ、その結果ファンになる可能性が上がります。
イベントの様子・その他 地元の方々が集まって、古民家の雰囲気も相まってまるで町内の集会のような雰囲気に。普段のイベントでは体験できないような状況で、興奮しました。
ペパボメンバーは5人で参加しており、発表はそのうち僕を含め3名が行いました。ECに関する発表で@teeeeeeoo、ハンドメイドに関する発表で@shikakunが登壇しました。ペパボ以外では、ギフトで大人気の五島の蒲鉾を作っている浜口水産さんによる「浜口水産のデザインへの取り組み」、五島の鯛で出汁をとったなんにでもあうカレーのごと株式会社さんによる「カレーのリデザインについて」、さんごさんが開いているコーヒーショップCORAL COFFEEについて、さんごさんによる「CORAL COFFEEが目指すもの」という発表がありました。
諸事情でスクリーンの用意ができず、Macをイスに置きまるで落語のように発表を行いました。
畳が最高に落ち着きます。
海の水が透明過ぎた。
ここ数年で急激に発展している五島のデザイン界隈に触れられて、とても刺激を受けた旅でした。</description>
    </item>
    
    <item>
      <title>迷い彷徨った先で見つけた自分の進むべき道〜キャリアキーノート2017〜</title>
      <link>https://blog.orangebomb.org/blog/2017/08/25/career-keynote/</link>
      <pubDate>Fri, 25 Aug 2017 08:36:15 +0900</pubDate>
      
      <guid>https://blog.orangebomb.org/blog/2017/08/25/career-keynote/</guid>
      <description>僕が務めるGMOペパボの同僚、@hfmが産んだ「キャリアキーノート」という取り組みがあります。キャリアキーノートとは、
 先輩の個人史 (キャリア) を紐解いてもらう中で、その根底に一貫して流れる基本的な考え方 (キーノート) を学ぶ場
 というものです。要するに「これまで自分が歩んで来た道のりの過程で生成された自分の根幹部分を、他者に共有する “資料” およびその “発表の場” 」だと僕は認識しています。詳しくは@hfmの記事 キャリアキーノートとはなにか をご覧ください。
今年の春、会社に新卒の７期生たちが入社しました。その後の新卒研修の中で、各職種から１名ずつ発表する方式のキャリアキーノートのパートがあり、僕がデザイナー枠として参加できることになりました。今回はそこで発表した内容を掲載します。なんやかんやで公開し損ねてました。僕が学校を卒業し、就職し、そして今に至るまでどんな道を歩み何を得たのかがわかります。
ヒューマンアカデミー、当時は長崎校が出島にあったんです。今はなくなってしまいましたが&amp;hellip;。四つ折りにする紙の話、実際に７期生たちがやってみたところ、2/3がその通り中央よりほんの少し上に点を打っていました。残りの1/3は本当の中央に点を打っていたので、 「人間は本当の中央より ほんの少しだけ上を中央と感じるがち」というところでしょうか。みなさんも試してみてくださいね。
社内のことなんてどうでもよくない？のくだりは、「視野が社内だけに留まってどうすんだよ世の中を見ろ、もっと広く見ろ、そして得た学びで社内でぶつかった問題を解決すべきだ」と捉え、ゴニョゴニョ悩む時代は幕を閉じました。最高。誤解を生みそうなワードでしたが、社内のことなんてほっぽり出せ、という意味ではありませんでした。
この資料を作るために過去を振り返って以降時折思い出すのが、恩師の言葉です。
 君のポートフォリオは５、６年前の手法だよ
 幸いなことに、今僕はデザイナーとして働くことができている。しかし、その実力とは？働けてさえいればいいのか？あの頃とは違う。&amp;hellip;本当に？
これから完全に新しく何かをデザインするとする。その結果、もしかしたら今でも５、６年くらい前のレベルのままなのではないか？今の自分は、最大の自分か？見た目だけがデザインではないから、装飾スキルが古いか新しいかとかいうよりも、トレンドだのなんだのとかそんな話でもなく、 「設計」という本当の意味でのデザイン能力は、現時点の自分にとって最大か？
本質的な「デザイン」ということに、新しいも古いもないのかもしれない。ただ、この言葉を思い出すたびに、今の自分が本当の全力なのか、見つめなおします。</description>
    </item>
    
    <item>
      <title>僕の視点で見たロリポップ！リブランディング〜開始からリリースまで〜 / Design Casual Talks #2</title>
      <link>https://blog.orangebomb.org/blog/2017/08/04/lolipop-rebranding/</link>
      <pubDate>Fri, 04 Aug 2017 12:48:04 +0900</pubDate>
      
      <guid>https://blog.orangebomb.org/blog/2017/08/04/lolipop-rebranding/</guid>
      <description>ロリポップ！レンタルサーバーというホスティングサービスがあります。2001年に開始したサービスで、もう15年以上続いています。僕はそのロリポップ！を提供しているGMOペパボに勤めていて、ロリポのデザイナーをやっています。
15年以上続いてきた老舗サービスを、生まれ変わらせる必要がある。そういう問題に直面し、福岡支社長・マネージャー・エンジニア・デザイナー・カスタマーサービス・インフラエンジニア・ディレクター・特別顧問という関係者全員が集い生まれ変わらせるプロジェクトを始動させました。
結果開始からリリースまで１年ほどかかりました。デザイナーのひとりとして最初から最後まで携わった身として、共同主催でやったデザイン勉強会 Design Casual Talks #2 にて「僕の視点で見たロリポップ！リブランディング」というタイトルで発表しました。
15年以上ずっと大きな変化をすることができなかったサービスをどのように生まれ変わらせたのか？
イベントの様子 前回よりも多くの方にお越しいただけて、とても楽しい勉強会になりました。 経験不足によりいろいろ失敗しご迷惑をおかけしてしまって申し訳なかったのですが、でもやっぱりデザインの勉強会は最高だなというところが正直な感想です。もっと福岡のデザイン界隈が盛り上がりますように！
所感 ブランディングを行う際にも、例によっていかに「言語化」することが重要かを再確認しました。 発表時間が15分だったのでこのような省略された内容になりましたが、取り組んだ１年には膨大な学びが他にもまだまだありました。 今後まだお話しできていない部分もアウトプットしていけたらと思います。
リリース後、約束を守るために言語化した軸を中心にプロジェクトを進行中です。まだまだパワーアップしていくので、よければ今後のロリポップ！にご注目ください。</description>
    </item>
    
    <item>
      <title>影があるとなぜ立体だと認識するのか？インターフェイスの仮説を脳科学から考える</title>
      <link>https://blog.orangebomb.org/blog/2017/07/25/brain-science/</link>
      <pubDate>Tue, 25 Jul 2017 08:27:03 +0900</pubDate>
      
      <guid>https://blog.orangebomb.org/blog/2017/07/25/brain-science/</guid>
      <description>デザインをするとき、様々な仮説に基づき、設計する。「影があれば浮き出て見えるので、影の有無によって主張レベルをコントロールできる」「黄色は主張する色なので、このコンテンツにふさわしい」「色は薄くしたりグレーにすれば非アクティブと認識する。アクティブなものだけ色を濃くしよう」など。
理解できるし、正しいはずだ。
でもどうして「影があれば浮き出て見える」のだろう？僕にはその説明ができなかった。錯覚するから？ならばなぜ錯覚する？実際は平面でしかないじゃないか。
自分の作ったものを人に説明するとき前述のような解説をするが、心の中では、どこか腑に落ちない感じがしていた。「自分自身がそう感じるから、誰もが同じはずだ」本当にそうだろうか？
謎を謎のままにして進めることをしたくなかったので
 影があれば浮き出て見えるのはなぜか 色は薄くしたりグレーにすれば非アクティブと認識するのはなぜか  今回はこの２点の事象について調べてみた。
出典・参考文献 以下の文献の情報を参考にしました。
 Tom Stafford・Matt Webb 『Mind Hacks 実験で知る脳と心のシステム』 夏目 大 訳、オライリージャパン、2005年、ISBN4-87311-271-0  まとめ終えて 実はこの資料は2015年にGMOペパボの社内デザイナー勉強会にて発表したものだ。「ブログを作りたいから、それまでとっとこう」と思ってアップロードしていなかった。ようやく実現できた。 ブログを作るのが楽しいものだからテンプレートをいじくりまわすことにばかり時間を割いてしまったり、いざ投稿しようと思ったら先にSSL化しないとまずいと気付いたり。まだ溜まっている投稿ネタがいくつかあるので、近いうちにそちらも公開したい。
このスライドを作ったことによって、人間が錯覚する「理由」の一部がわかった。すごく面白い。 デザイナーが作ったものを利用するのは同じ人間だ。なので、人間の仕組みについてよく理解しておいた方が絶対にいいものが作れるはずだ。 僕はこれからも疑問に持ったことは一つずつ解決していきたい。 「そこまでしないといけないの？」というより、純粋に僕自身にとってめちゃくちゃ面白い。</description>
    </item>
    
    <item>
      <title>アクセシブルにするならSlideShareを選ぶべき？SlideShareへのアップロード方法</title>
      <link>https://blog.orangebomb.org/blog/2017/07/19/slideshare/</link>
      <pubDate>Wed, 19 Jul 2017 05:34:18 +0900</pubDate>
      
      <guid>https://blog.orangebomb.org/blog/2017/07/19/slideshare/</guid>
      <description>Keynoteなどでスライドを作成し、スライドのSNSへアップロードし、シェアする。多くの人が行なっているこの行動、場合によってはスライドの中身にアクセスできないことがあるという事実を知った。そこで、そのようなことが起こらないようにアクセシブルなスライドにするにはどうすればよいのか？という部分に関し調査・検証を行なったので記録する。
 アクセシブルとは？ アクセシビリティと、スライドのアップロードに関する事情  SpeakerDeckでは情報（スライドの内容）にアクセスできない SlideShareの場合は中身を読みテキストとしてWebページ上に表示される   Keynoteで作ったスライドをSlideShareにアップロードする手順 Adobe Acrobut Pro を使わない場合 完璧は難しい。「割り切ること」も重要なこと 余談１.SlideShareにアップロードしたスライドを削除する方法 余談２.一応ある？SpeakerDeckのスライドをスクリーンリーダーで読む方法 所感 【7/20追記】Acrobutでのトリミングなしで済む方法  アクセシブルとは？ まずは「アクセシブル」という単語について。
 アクセシブルデザインは、高齢者・障害のある人々の利便性を配慮しつつ、健常者の利便性も確保することを目的として、従来の設計を高齢者や障害のある人々のニーズに合わせ拡張することによって、製品、サービス、建物などがそのまま利用できる潜在顧客数を最大限に増やすための設計ということができます。これにより、ビジネス拡大の効果を得ることが可能になりますが、ビジネスを最優先させるのではなく、高齢者や障害のある人々の利便性を高めることが主たるねらいです。 アクセシブルデザインは、ISOにおける ガイド71 の議論において、高齢者・障害のある人々が健常者と同様に社会システムにアクセスできる言葉として定義されています。
 出典：共用品推進機構 - アクセシブルデザイン関連JIS・基本規格
このように書かれることが多いが、僕は どのような条件であろうと誰しもが同じようにコンテンツにアクセスすることができること という認識をしている。僕にとって「障害者対応」という言葉は本質的ではなく、目が見えなかったとしても、耳が聞こえなかったとしても、テクノロジーを利用すれば健常者と同じようにコンテンツを参照できるのだから、当然そうあるべきである、というもの。（似て非なるもの、というか。やっていることは同じかもしれないが、捉え方の問題）
アクセシビリティと、スライドのアップロードに関する事情 ここからは、スライドとアクセシビリティの関係について。
（１）SpeakerDeckでは情報（スライドの内容）にアクセスできない 以前、スライドをSpeakerDeckにて公開した時に、スクリーンリーダーユーザーである @ma10 さんが以下のようなツイートをなされていた。
驚いていると、 @magi1125 さんからアドバイスのメッセージをいただいた。
 SpeakerDeckはスライドを画像として表示するのみである テキスト情報として内容にアクセスすることができない  なんてこった&amp;hellip;
（２）SlideShareの場合は中身を読みテキストとしてWebページ上に表示される SpeakerDeckに関しショックを受けたところで、「SlideShareならばその問題が起こらない」という情報も得た。
 文字を画像にしない等、適切な方法でSlideShareにアップロードすればスライド内のテキストを抜き出してくれるため、スクリーンリーダーユーザーでも内容を把握することができる スクリーンリーダーで読み上げることが可能＝視覚以外でアクセスが可能  しかし、SpeakerDeckだと起こる困ることは起こらなくても、SlideShareにはSlideShareならではの困ることがあるのであった。 僕はスライド作成にはKeynoteを使っている。困る問題とは、Keynoteバージョン6以降で生成したPDFをSlideShareにアップロードすると、作ったスライド上からテキスト部分がすべて表示されなくなってしまう、という問題だ。実際はそこにあるけどただ映らないのみ。スライド外にテキスト出力はされていた。 今回、どのようにすれば問題なくSlideShareにアップロードすることができるのかを調べた。
Keynoteで作ったスライドをSlideShareにアップロードする手順 そのうちSlideShare側がバグを解消してくれるのでは？という点に関して。KeynoteのスライドをSlideShareにアップロードすると日本語が表示されない問題 - Qiita / 公式の回答  によると、残念ながら前述の文字が消える問題を解決する対応は時間がかかるようで、こちら側が頑張らないといけない… @magi1125 さんがツイートしていた解決策をベースに進める。
この検証では以下のバージョンを使用する。
 Keynote バージョン7.</description>
    </item>
    
    <item>
      <title>目標設定が下手な自分と、デザイナーのアウトプットに関するヒント</title>
      <link>https://blog.orangebomb.org/blog/2017/02/03/output/</link>
      <pubDate>Fri, 03 Feb 2017 13:54:04 +0900</pubDate>
      
      <guid>https://blog.orangebomb.org/blog/2017/02/03/output/</guid>
      <description>僕は目標を立てるのが下手だ。ついでに言うと、自己評価も下手だ。 評価面談を行う上司やシニアデザイナーにはいつも迷惑をかけていた。今回も、例によって「あとはやるだけだ！」という目標設定はできていない。 それに対し、プライベート活動に関する目標を立てるのは上手だ。なぜならば、自分のやりたいことがたくさんあるから。とにかくやりたいことに対し、モチベーション全開で向き合うだけでよかった。ただ、なんとなくあっちこっち行き当たりばったりで軸がないような気もしていた。
去年は公私ともに悩んだ結果、自分が本当にやりたいことをやっとの思いで言語化することができた。《「わからない」をなくす 》というのがそれだ。 これに至ったのは、「自分が作ったものが、誰かにとっては使い物にならない」ということがあり得ることが嫌だったからだ。「なにこれ、よくわかんないんだけど」という言葉を聞いたら、かなりショックである。しかし、必ずそれがあるのも事実だ。 僕は誰でもストレスなく使えることを追求することが好きで、だから人間そのものの特性ついてもっと知りたいし、視覚障害など晴眼者とは違う条件下での利用にも対応できるようにしたい。
仕事の目標を立てることに現在進行形で悩んでいる。締め切りはとっくに過ぎているが、プロジェクトの関係で、もっと戦略が具体的になってから定義する手筈になっていた。 が、しかし。具体的になったとしても、評価者が悩まず高評価をつけてくれるような自己評価をすることができる目標設定はできないだろう。
何に困っているのか？それは「言い回し」だ。ハッキリ数字が出る目標設定は簡単だ。それに達成しているか・いないかの２択だけでいい。今回の目標が改善タイプであればそのように数字の変化を軸にした目標を設定すればよいのだが、今回は改善タイプではない。新しくモノを作ることで期間ギリギリ（計測期間を確保できない）のケースだ。 よって、「作り上げる」タイプの目標設定をする必要がある。
「○○を作った」「○○で成果を出す」では、定量的ではないので評価者が評価をしにくい。解釈次第では、あとから結果がいくらでも変化することになる。 どうにか、上手い言い回しはないだろうか？評価判定がしやすい目標設定とは？ 他の人の評価シートを眺めていても、真に上手なのか、評価者によってはその人も「評価しにくい目標」という判定になるのではないか、それ自体の判断すら曖昧だった。なので「説得力」に関しても重要だった。
そこで、「作り上げる」タイプの目標設定が上手な人を探した。そのためにまず「上手であると判定できる人」を探す必要があった。 僕はデザイナーだが、以前からエンジニアの評価シートを眺めることが好きだった。職種柄、言語化に長けているからだろう、読んでいて気持ちが良かったのだ。 僕が勤めるGMOペパボには、シニア・プリンシパルエンジニアという上位職のエンジニア @matsumotory さんがいる。 技術者と研究者の狭間で得たたったひとつの教訓 2016 というスライドを読んでからファンになってしまって、スライドやissue、ブログ記事などをよく眺めてさせていただいていた。 @matsumotory さんに「作り上げる」タイプの目標設定について尋ねてみたら、想像以上に多くのことをアドバイスしていただけた。今回いただいたアドバイスを自分の中に取り込み、自分なりの解釈をし以下に記録する。
「作り上げる」の目標設定・達成のためのヒント 1. アウトプット・フィードバックを繰り返し「説得力」を獲得すること 作って公開・作ったものを社外で発表・自社サービスへ導入。エンジニアの王道スタイルという印象のあるこのパターン。 しかし、ただ作ればいいというわけではない。自分だけしか価値を感じない結果に終われば、それは自身の評価には繋がらない。その疑念を払拭する意味も含め、大事なことはアウトプットでそれを測ること。アウトプットし、それに対する社外のフィードバックを受け…というその繰り返しによって社外でも一定の評価を得られれば、それが社内評価での「説得力」となる。
2. 考えをまとめるだけでコンテンツになる  「これ（ FastContainerアーキテクチャ概論 ）とか何も作ってないですけど、考えだけをまとめたものですが、ちゃんと一つの作り上げたものに見えますね。それをベースに提案する、などがその先でしょうか」
 ライブラリ・ソフトウェア作成以外には、上記のような設計や思考、アーキテクチャをちゃんと整理してアウトプットするなどがある。なので「プログラミング言語が扱えないから、エンジニアみたいに全部自分で作り上げるなんてできない！」などと嘆く必要はない（とはいえデザイナーもフロントエンドに特化している人ならばひとりでやってしまいそうであるが）。 設計こそデザイナーの本来の役目。ターゲットユーザーに対してインターフェイスがどのように機能するか。使いやすさはこれが一番か。誰でもアクセスできるか。セオリーに則っているが、もっとこうしたらこれまで以上に利便性が向上するのではないか。 考え始めたらアウトプットに繋がる題材はゴロゴロ存在する。
3. 社外へのアウトプットは「一般化」で解決する やっていることを一般化して整理する、ということをやれば社内業務の出来事も社外へ向けてアウトプットすることができる。 Webオペレーションエンジニアのアウトプットと開発力 にも書かれている。 一般化とは、業務で生み出したもの・やったことを、組織に依存しない手法、コード、テクニックへと変換し誰でも問題なく参照できるようにすることだと僕は認識した。 一般化をすることで、会社的に出していいものか…まずいかなあ…などというアウトプットに対する足枷を外すことができる。
4. 提案したものをちゃんと作り上げる 細かくアウトプットしていく、というのがどのケースにおいても重要。 細かくアウトプットし、フィードバックを得て磨き上げる。その先で説得力を獲得する。 そしてそれを経て提案し、ちゃんと作り上げるまで実行する。
まとめ 目標設定のための「言い回し」に関する具体的な答えを見出せるまでには至らなかった。 しかし、
 将来、説得力を獲得している 将来、設計や思考がまとまっており、伝わる状態になっている 将来、提案が実行され（取り入れられ）作り上げられるものがある  これらを意識していけば自ずと言い表せるようになるはずだ。 一般化して考える癖をつけることと、自分の業務と社外の内容を重ね合わせるように努力して生産性を高くしていくことに注力するとよくなる。
僕はこの出来事を経た後も、変わらず目標を立てることも自己評価も下手くそだろう。何かに気づいたからその後一気に好転するくらいデキるやつなら、こんなに悩まずともきっとそのうちできていた。 大事なのは、すぐにできるかできないかではない。 これからも何度も失敗を積み重ねていく中で、今回得たことを忘れず継続していくことだ。 すると、失敗の先にきっと成功があるだろう。
最後の最後にこのアドバイスをする @matsumotory さん、さすがだった。</description>
    </item>
    
    <item>
      <title>目が見えない状態を想定したUI設計</title>
      <link>https://blog.orangebomb.org/blog/2016/11/29/web-accessibility/</link>
      <pubDate>Tue, 29 Nov 2016 13:51:11 +0900</pubDate>
      
      <guid>https://blog.orangebomb.org/blog/2016/11/29/web-accessibility/</guid>
      <description>視覚がない、弱い人はどのようにサイトを利用しているのか、使っているのはどんなインターフェイスなのか。ずっと気になっていたというのもあり、「目が見えない状態を想定したUI設計」という内容で、主催した勉強会 Design Casual Talks #1 で発表をしました。
インターフェイスとは目で見えるものだけではなく、音声だけで構成されるインターフェイスもある。では僕らがページを作るとき、具体的にどうすればいいのか？
出典・参考文献 すべて2016年9月時点（スライド作成時）の情報を参考にしました。
 視覚障害者 - Wikipedia 視覚障害とは - 公益財団法人 関西盲導犬協会 視覚障害とは - 高知県立盲学校 ２－１　視覚障害とは - 秋田県立視覚支援学校 厚生労働省 統計情報・白書 平成18年身体障害児・者実態調査結果 視覚障害者 全盲者と弱視者の割合 統計みたいなものが欲しい&amp;hellip; - Yahoo!知恵袋 WAI-ARIA の基礎知識 — Website Usability Info WAI-ARIA | HTMLリファレンス  まとめ終えて イベントを前に、とにかくアクセシビリティに関する多くの情報を得たくて、コーディングWebアクセシビリティを購入しチェックしました。買ってよかった。
スクリーンリーダーをどのように使っているのか、WAI-ARIAの具体的な実装はどのように進んでいくのか、まだまだわかっていないので今後も調査・学習を続けていきたい。</description>
    </item>
    
  </channel>
</rss>